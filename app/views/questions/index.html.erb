<div class="space-y-6">
  <!-- Page Header -->
  <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">Ceremony Questions</h1>
        <p class="text-gray-600 mt-1"><%= @ceremony.name %> - <%= @team.name %></p>
        <div class="mt-2 flex items-center space-x-4 text-sm text-gray-500">
          <span><%= @ceremony.cadence.humanize %></span>
          <span><%= @ceremony.scheduled_time.strftime("%I:%M %p") %></span>
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
            <%= @questions.count %> questions
          </span>
        </div>
      </div>
      <div class="flex space-x-3">
        <%= link_to "Back to Ceremony", team_ceremony_path(@team, @ceremony), 
            class: "inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" %>
        <%= link_to "Add Question", new_team_ceremony_question_path(@team, @ceremony), 
            class: "inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" %>
      </div>
    </div>
  </div>

  <!-- Questions List -->
  <% if @questions.any? %>
    <div class="bg-white rounded-lg shadow-sm border border-gray-200">
      <div class="px-6 py-4 border-b border-gray-200">
        <h2 class="text-lg font-medium text-gray-900">Question List</h2>
        <p class="text-sm text-gray-600">Drag and drop to reorder questions</p>
      </div>
      
      <div class="divide-y divide-gray-200" id="questions-list">
        <% @questions.each do |question| %>
          <div class="px-6 py-4 question-item" data-question-id="<%= question.id %>">
            <div class="flex items-center justify-between">
              <div class="flex items-center space-x-3">
                <div class="flex-shrink-0 cursor-move drag-handle">
                  <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16"></path>
                  </svg>
                </div>
                <div class="flex items-center space-x-3">
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                    <%= question.order %>
                  </span>
                  <h3 class="text-sm font-medium text-gray-900"><%= question.question_text %></h3>
                </div>
              </div>
              
              <div class="flex items-center space-x-3">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  <%= question.question_type.humanize %>
                </span>
                <% if question.required? %>
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                    Required
                  </span>
                <% end %>
                <div class="flex space-x-2">
                  <%= link_to "Edit", edit_team_ceremony_question_path(@team, @ceremony, question), 
                      class: "inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" %>
                  <%= link_to "Delete", team_ceremony_question_path(@team, @ceremony, question), 
                      method: :delete,
                      data: { confirm: 'Are you sure you want to delete this question?' },
                      class: "inline-flex items-center px-3 py-2 border border-red-300 shadow-sm text-sm leading-4 font-medium rounded-md text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500" %>
                </div>
              </div>
            </div>
            
            <% if question.has_options? %>
              <div class="mt-3 ml-11">
                <p class="text-sm text-gray-600">Options: <%= question.options_array.join(', ') %></p>
              </div>
            <% end %>
          </div>
        <% end %>
      </div>
    </div>
  <% else %>
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center">
      <div class="w-16 h-16 bg-gray-100 rounded-lg flex items-center justify-center mx-auto mb-4">
        <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      </div>
      <h3 class="text-lg font-medium text-gray-900 mb-2">No questions yet</h3>
      <p class="text-gray-600 mb-4">Add questions to make this ceremony meaningful for your team.</p>
      <%= link_to "Add Your First Question", new_team_ceremony_question_path(@team, @ceremony), 
          class: "inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" %>
    </div>
  <% end %>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const questionsList = document.getElementById('questions-list');
  if (!questionsList) return;

  let draggedItem = null;

  // Make questions draggable
  const questionItems = questionsList.querySelectorAll('.question-item');
  questionItems.forEach(item => {
    item.draggable = true;
  });

  // Drag and drop functionality
  questionsList.addEventListener('dragstart', function(e) {
    if (e.target.closest('.question-item')) {
      draggedItem = e.target.closest('.question-item');
      e.target.style.opacity = '0.5';
    }
  });

  questionsList.addEventListener('dragend', function(e) {
    if (e.target.closest('.question-item')) {
      e.target.style.opacity = '1';
    }
  });

  questionsList.addEventListener('dragover', function(e) {
    e.preventDefault();
    if (!draggedItem) return;
    
    const afterElement = getDragAfterElement(questionsList, e.clientY);
    if (afterElement == null) {
      questionsList.appendChild(draggedItem);
    } else {
      questionsList.insertBefore(draggedItem, afterElement);
    }
  });

  function getDragAfterElement(container, y) {
    const draggableElements = [...container.querySelectorAll('.question-item:not(.dragging)')];
    
    return draggableElements.reduce((closest, child) => {
      const box = child.getBoundingClientRect();
      const offset = y - box.top - box.height / 2;
      if (offset < 0 && offset > closest.offset) {
        return { offset: offset, element: child };
      } else {
        return closest;
      }
    }, { offset: Number.NEGATIVE_INFINITY }).element;
  }

  // Update order after drop
  questionsList.addEventListener('drop', function(e) {
    e.preventDefault();
    if (draggedItem) {
      updateQuestionOrder();
      draggedItem = null;
    }
  });

  function updateQuestionOrder() {
    const questions = Array.from(questionsList.querySelectorAll('.question-item'));
    const newOrder = questions.map((item, index) => ({
      id: item.dataset.questionId,
      order: index + 1
    }));

    // Send AJAX request to update order
    fetch('<%= reorder_team_ceremony_questions_path(@team, @ceremony) %>', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({ questions: newOrder })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // Update order numbers visually
        questions.forEach((item, index) => {
          const orderBadge = item.querySelector('.bg-gray-100');
          if (orderBadge) {
            orderBadge.textContent = index + 1;
          }
        });
        
        // Show success feedback
        showFeedback('Questions reordered successfully!', 'success');
      } else {
        showFeedback('Failed to reorder questions: ' + (data.error || 'Unknown error'), 'error');
      }
    })
    .catch(error => {
      console.error('Error reordering questions:', error);
      showFeedback('Failed to reorder questions. Please try again.', 'error');
    });
  }

  function showFeedback(message, type) {
    // Create feedback element
    const feedback = document.createElement('div');
    feedback.className = `fixed top-4 right-4 px-6 py-3 rounded-md shadow-lg z-50 ${
      type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
    }`;
    feedback.textContent = message;
    
    document.body.appendChild(feedback);
    
    // Remove after 3 seconds
    setTimeout(() => {
      if (feedback.parentNode) {
        feedback.parentNode.removeChild(feedback);
      }
    }, 3000);
  }
});
</script>
